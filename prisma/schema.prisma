generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  nickName      String         @unique @db.VarChar(255)
  password      String         @db.VarChar(255)
  email         String?        @unique @db.VarChar(255)
  points        Int?           @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastclaimed   Int?
  alarms        Alarm[]
  cards         Card[]
  createdCards  Card[]         @relation("CreatedCards")
  exchanges     Exchange[]     @relation("Requester")
  notifications Notification[]
  purchases     Purchase[]
  shops         Shop[]         @relation("Seller")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Card {
  id                Int          @id @default(autoincrement())
  ownerId           Int
  creatorId         Int
  name              String       @db.VarChar(255)
  price             Int
  grade             Grade
  genre             Genre
  description       String?
  totalQuantity     Int
  remainingQuantity Int
  imgUrl            String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  status            CardStatus?  @default(AVAILABLE)
  tradeStatus       TradeStatus? @default(CREATED)
  owner             User         @relation(fields: [ownerId], references: [id])
  creator           User         @relation("CreatedCards", fields: [creatorId], references: [id])
  exchangesOffered  Exchange[]   @relation("OfferedCard")
  exchangesTarget   Exchange[]   @relation("TargetCard")
  purchases         Purchase[]
  shops             Shop[]
}

model Purchase {
  id        Int      @id @default(autoincrement())
  buyerId   Int
  cardId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  buyer     User     @relation(fields: [buyerId], references: [id])
  card      Card     @relation(fields: [cardId], references: [id])
}

model Exchange {
  id            Int      @id @default(autoincrement())
  requesterId   Int
  targetCardId  Int
  offeredCardId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  offeredCard   Card     @relation("OfferedCard", fields: [offeredCardId], references: [id])
  requester     User     @relation("Requester", fields: [requesterId], references: [id])
  targetCard    Card     @relation("TargetCard", fields: [targetCardId], references: [id])
}

model Shop {
  id        Int      @id @default(autoincrement())
  sellerId  Int
  cardId    Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card     @relation(fields: [cardId], references: [id])
  seller    User     @relation("Seller", fields: [sellerId], references: [id])
}

model Alarm {
  id         Int      @id @default(autoincrement())
  user_id    Int
  message    String
  type       String
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
}

enum Grade {
  COMMON
  RARE
  SUPER_RARE
  LEGENDARY
}

enum Genre {
  TRAVEL
  LANDSCAPE
  PORTRAIT
  OBJECT
}

enum CardStatus {
  AVAILABLE // 판매 중
  SOLD_OUT // 거래 완료 (판매 or 교환)
  IN_TRADE // 교환 대기 중
}

enum AlarmType {
  PHOTO_CARD_EXCHANGE_SUCCESS
  PHOTO_CARD_EXCHANGE_OFFER
  PHOTO_CARD_PURCHASE_COMPLETE
  PHOTO_CARD_SALE_SUCCESS
  PHOTO_CARD_OUT_OF_STOCK
  REWARD
}

enum TradeStatus {
  CREATED // 생성된 상태
  SOLD // 판매로 거래 완료
  TRADED // 교환으로 거래 완료
}
